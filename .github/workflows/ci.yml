name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Check formatting
        run: bun run format:check

  docker:
    runs-on: ubuntu-latest
    needs: test
    # Only run this job on main branch and tags
    if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/stream-recorder
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test config
        run: cp template_config.json config.json

      - name: Create recordings directory
        run: mkdir -p recordings

      - name: Test container start
        run: |
          docker run -d \
            --name stream-recorder-test \
            -p 3000:3000 \
            -v $(pwd)/recordings:/usr/src/app/recordings \
            -v $(pwd)/config.json:/usr/src/app/config.json \
            ${{ secrets.DOCKERHUB_USERNAME }}/stream-recorder:latest

          # Wait for container to start
          sleep 10

          # Check if container is running
          if [ "$(docker ps -q -f name=stream-recorder-test)" ]; then
            echo "Container started successfully"
            # Check if app is responding
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Application is responding"
            else
              echo "Application is not responding"
              docker logs stream-recorder-test
              exit 1
            fi
          else
            echo "Container failed to start"
            docker logs stream-recorder-test
            exit 1
          fi
